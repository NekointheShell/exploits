#include <stdio.h>
#include <windows.h>


int main(void) {
    /* Get current process token */
    HANDLE token;
    HANDLE process = GetCurrentProcess();
    BOOL open_status = OpenProcessToken(process, TOKEN_QUERY | TOKEN_ADJUST_PRIVILEGES, &token);

    if(open_status == FALSE) {
        puts("Unable to get current process token!");
        return 2;
    }

    /* Get token information size */
    DWORD token_privilege_size = 0;
    BOOL information_status = GetTokenInformation(token, TokenPrivileges, NULL, token_privilege_size, &token_privilege_size);

    if(information_status != 0) {
        puts("Unable to get token information size!");
        return 3;
    }

    /* Get token information */
    PTOKEN_PRIVILEGES token_privileges = NULL;
    token_privileges = (PTOKEN_PRIVILEGES)malloc(token_privilege_size);
    information_status = GetTokenInformation(token, TokenPrivileges, token_privileges, token_privilege_size, &token_privilege_size);

    if(information_status != 0) {
        puts("Unable to get token information!");
        return 4;
    }

    /* Lookup and list privilege names */
    BOOL ret = FALSE;
    for(DWORD i = 0; i < token_privileges -> PrivilegeCount; ++i) {
        LUID_AND_ATTRIBUTES laa = token_privileges -> Privileges[i];

        /* Lookup privilege name size */
        DWORD privilege_name_size = 0;
        BOOL lookup_status = LookupPrivilegeName(NULL, &laa.Luid, NULL, &privilege_name_size);

        if(lookup_status != 0) {
            puts("Unable to lookup privilege name size!");
            return 5;
        }

        /* Lookup privilege name */
        LPSTR privilege_name = NULL;
        privilege_name = (LPSTR)malloc(privilege_name_size);
        lookup_status = LookupPrivilegeName(NULL, &laa.Luid, privilege_name, &privilege_name_size);

        if(lookup_status == 0) {
            puts("Unable to lookup privilege name!");
            return 6;
        }

        /* Print privilege name */
        printf("Privilege: %s\n", privilege_name);
        if(privilege_name == "SeImpersonatePrivilege") { ret = TRUE; }
    }

    puts("");
    if(ret == TRUE) {
        puts("SeImpersonatePrivilege Found!");
        return 0;
    }
    else {
        puts("SeImpersonatePrivilege Not found!");
        return 1;
    }
}
